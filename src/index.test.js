const mockTrack = require("./tracker");
const mod = require(".");

/**
 * After installing jest v29, you will see this error in reference to the variable 'track':
 *    The module factory of `jest.mock()` is not allowed to reference any out-of-scope variables.
 * The solution to the error, as mentioned in the error text, is to add 'mock' to get 'mockTrack'.
 *
 * But this error also explains the original issue, as `jest.mock()` creates the mock before
 * evaulating anything outside its scope, such as the `require()`s. So 'mod' will be evaulated
 * after the mock is created, giving it and 'tracks' the new values generated by the mock.
 *
 */
jest.mock("./data", () => {
  mockTrack("data-mock");
  return { isMock: true };
});

console.debug(`** mod = ${JSON.stringify(mod)}`);
console.debug(`** tracks = ${JSON.stringify(mockTrack.tracks)}`);

test("use mock", () => {
  expect(mod).toEqual({ data: { isMock: true } });

  expect(mockTrack.tracks.includes("data")).toBe(false);

  expect(mockTrack.tracks).toEqual(["data-mock", "index"]);
});
